#
# MODELS
#

# Schema for event-detail DDB Table
#
type EventDetail @aws_cognito_user_pools
@aws_iam {
	event_id: String!
	user_id: String!
	start_date_time: String
	end_date_time: String
	medication: String
	mood: String
	food: String
    notes: String
}

type EventDetailConnection @aws_cognito_user_pools
@aws_iam {
	items: [EventDetail]
	nextToken: String
}

# [input] EventDetailInput
### CreateEventDetail, DeleteEventDetail and UpdateEventDetail use this input type
input EventDetailInput {
	event_id: String!
	user_id: String!
	start_date_time: String
	end_date_time: String
	medication: String
	mood: String
	food: String
    notes: String
}

input ModelEventDetailConditionInput {
	event_id: String!
	user_id: ModelStringInput
	start_date_time: String
	end_date_time: String
	medication: String
	mood: String
	food: String
    notes: String
	and: [ModelEventDetailConditionInput]
	or: [ModelEventDetailConditionInput]
	not: ModelEventDetailConditionInput
}

input ModelEventDetailFilterInput {
	event_id: ModelStringInput
	start_date_time: String
	end_date_time: String
	medication: String
	mood: String
	food: String
    notes: String
	and: [ModelEventDetailFilterInput]
	or: [ModelEventDetailFilterInput]
	not: ModelEventDetailFilterInput
}

input ModelStringInput {
	ne: String
	eq: String
	le: String
	lt: String
	ge: String
	gt: String
	contains: String
	notContains: String
	between: [String]
	beginsWith: String
}

# [input] DeleteEventInput
input DeleteEventInput {
    event_id: String
}


# Schema for patients DDB Table
#
type PatientsDetail @aws_cognito_user_pools
@aws_iam {
	patient_id: String!
	name: String
	sensor_types: [String]
    user_ids: [String]
}

type PatientsDetailConnection @aws_cognito_user_pools
@aws_iam {
	items: [PatientsDetail]
	nextToken: String
}

# [input] PatientsDetail
### CreatePatientsDetail, DeletePatientsDetail and UpdatePatientsDetail use this input type
input PatientsDetailInput {
	patient_id: String!
	name: String
	sensor_types: [String]
    user_ids: [String]
}

input ModelPatientsDetailConditionInput {
	patient_id: String!
	name: String
	sensor_types: [String]
    user_ids: [String]
	and: [ModelPatientsDetailConditionInput]
	or: [ModelPatientsDetailConditionInput]
	not: ModelPatientsDetailConditionInput
}

input ModelPatientsDetailFilterInput {
	patient_id: String!
	name: String
	sensor_types: [String]
    user_ids: [String]
	and: [ModelPatientsDetailFilterInput]
	or: [ModelPatientsDetailFilterInput]
	not: ModelPatientsDetailFilterInput
}

# [input] DeletePatientsDetailInput
input DeletePatientsDetailInput {
    patient_id: String
}


# Schema for sensors DDB Table
#
type SensorsDetail @aws_cognito_user_pools
@aws_iam {
	sensor_id: String!
	patient_id: String
	sensor_types: [String]
    watermark: String
    client_key: String
    secret_key: String
}

type SensorsDetailConnection @aws_cognito_user_pools
@aws_iam {
	items: [SensorsDetail]
	nextToken: String
}

# [input] SensorsDetail
### CreateSensorsDetail, DeleteSensorsDetail and UpdateSensorsDetail use this input type
input SensorsDetailInput {
	sensor_id: String!
	patient_id: String
	sensor_types: [String]
    watermark: String
    client_key: String
    secret_key: String
}

input ModelSensorsDetailConditionInput {
	sensor_id: String!
	patient_id: String
	sensor_types: [String]
    watermark: String
    client_key: String
    secret_key: String
	and: [ModelSensorsDetailConditionInput]
	or: [ModelSensorsDetailConditionInput]
	not: ModelSensorsDetailConditionInput
}

input ModelSensorsDetailFilterInput {
	sensor_id: String!
	patient_id: String
	sensor_types: [String]
    watermark: String
    client_key: String
    secret_key: String
	and: [ModelSensorsDetailFilterInput]
	or: [ModelSensorsDetailFilterInput]
	not: ModelSensorsDetailFilterInput
}

# [input] DeleteSensorsDetailInput
input DeleteSensorsDetailInput {
    sensor_id: String
}

# Schema for users DDB Table
#
type UsersDetail @aws_cognito_user_pools
@aws_iam {
	user_id: String!
    email: String
	user_type: String
	patient_ids: [String]
}

type UsersDetailConnection @aws_cognito_user_pools
@aws_iam {
	items: [UsersDetail]
	nextToken: String
}

# [input] UsersDetail
### CreateUsersDetail, DeleteUsersDetail and UpdateUsersDetail use this input type
input UsersDetailInput {
	user_id: String!
    email: String
	user_type: String
	patient_ids: [String]
}

input ModelUsersDetailConditionInput {
	user_id: String!
    email: String
	user_type: String
	patient_ids: [String]
	and: [ModelUsersDetailConditionInput]
	or: [ModelUsersDetailConditionInput]
	not: ModelUsersDetailConditionInput
}

input ModelUsersDetailFilterInput {
	user_id: String!
    email: String
	user_type: String
	patient_ids: [String]
	and: [ModelUsersDetailFilterInput]
	or: [ModelUsersDetailFilterInput]
	not: ModelUsersDetailFilterInput
}

# [input] DeleteUsersDetailInput
input DeleteUsersDetailInput {
    user_id: String
}


# 
# Query Lambda function
# 
input QueryRequest {
    patient_ids: [String]
    period: String
    statistic: String
    start: String
    end: String
}

type QueryResponse {
	columns: [String]
    rows: [[String]]
}


# 
# Insert Data Lambda function
#
input SimulateRequest {
    patient_id: String
    sensor_id: String
    timestamp_start: String
    timestamp_end: String
    measure_type: String
    measure_value_low: Int
    measure_value_high: Int
    measure_step_seconds: Int
}

type SimulateResponse {
	status: String
}

type Message {
	data: String
}

# 
# Event Search Lambda function
# 
input SearchRequest {
    patient_name: String
    keyword: String!
    start: String
    end: String
}

type SearchResponse {
	events: [EventDetail]
}

#
# QUERIES
#
type Query @aws_cognito_user_pools
@aws_iam {
    query(input: QueryRequest): QueryResponse
	getPatientMinMaxRange(patientId: String): QueryResponse
	searchEvents(input: SearchRequest): SearchResponse
	getMessage(patientId:String, eventType: String, startDate: String, endDate: String): Message
	getEventDetail(eventId: String!): EventDetail
	listEventDetails(filter: ModelEventDetailFilterInput, limit: Int, nextToken: String): EventDetailConnection
	getEventDetailsByUser(userId: String!, limit: Int, nextToken: String): EventDetailConnection
	getEventDetailsByUserAndCreateTime(
		userId: String!,
		startTime: String!,
		endTime: String!,
		limit: Int,
		nextToken: String
	): EventDetailConnection

	getPatientsDetail(patientId: String!): PatientsDetail
	listPatientsDetails(filter: ModelPatientsDetailFilterInput, limit: Int, nextToken: String): PatientsDetailConnection

	getSensorsDetail(patientId: String!): SensorsDetail
	getSensorsDetailByUser(patientId: String!, limit: Int, nextToken: String): SensorsDetailConnection
	listSensorsDetails(filter: ModelSensorsDetailFilterInput, limit: Int, nextToken: String): SensorsDetailConnection

	getUsersDetail(userId: String!): UsersDetail
	listUsersDetails(filter: ModelUsersDetailFilterInput, limit: Int, nextToken: String): UsersDetailConnection
	getPatientEventEarliestDate(userId: String!): EventDetailConnection
	getPatientEventLatestDate(userId: String!): EventDetailConnection

}

#
# MUTATIONS
#
type Mutation @aws_cognito_user_pools
@aws_iam {
	createEventDetail(input: EventDetailInput, condition: ModelEventDetailConditionInput): EventDetail
	updateEventDetail(input: EventDetailInput, condition: ModelEventDetailConditionInput): EventDetail
	deleteEventDetail(input: EventDetailInput, condition: ModelEventDetailConditionInput): EventDetail
	publishNewEventDetail(input: EventDetailInput!): EventDetail
	publishEventDetailUpdates(input: EventDetailInput!): EventDetail

	createPatientsDetail(input: PatientsDetailInput, condition: ModelPatientsDetailConditionInput): PatientsDetail
	updatePatientsDetail(input: PatientsDetailInput, condition: ModelPatientsDetailConditionInput): PatientsDetail
	deletePatientsDetail(input: PatientsDetailInput, condition: ModelPatientsDetailConditionInput): PatientsDetail
	publishNewPatientsDetail(input: PatientsDetailInput!): PatientsDetail
	publishPatientsDetailUpdates(input: PatientsDetailInput!): PatientsDetail

	createSensorsDetail(input: SensorsDetailInput, condition: ModelSensorsDetailConditionInput): SensorsDetail
	updateSensorsDetail(input: SensorsDetailInput, condition: ModelSensorsDetailConditionInput): SensorsDetail
	deleteSensorsDetail(input: SensorsDetailInput, condition: ModelSensorsDetailConditionInput): SensorsDetail
	publishNewSensorsDetail(input: SensorsDetailInput!): SensorsDetail
	publishSensorsDetailUpdates(input: SensorsDetailInput!): SensorsDetail

	createUsersDetail(input: UsersDetailInput, condition: ModelUsersDetailConditionInput): UsersDetail
	updateUsersDetail(input: UsersDetailInput, condition: ModelUsersDetailConditionInput): UsersDetail
	deleteUsersDetail(input: UsersDetailInput, condition: ModelUsersDetailConditionInput): UsersDetail
	publishNewUsersDetail(input: UsersDetailInput!): UsersDetail
	publishUsersDetailUpdates(input: UsersDetailInput!): UsersDetail

    simulate(input: SimulateRequest): SimulateResponse
}

#
# SUBSCRIPTIONS
#
type Subscription @aws_cognito_user_pools
@aws_iam {
	onCreateEventDetail: EventDetail
		@aws_subscribe(mutations: ["createEventDetail","publishNewEventDetail"])
	onUpdateEventDetail: EventDetail
		@aws_subscribe(mutations: ["updateEventDetail","publishEventDetailUpdates"])
	onDeleteEventDetail: EventDetail
		@aws_subscribe(mutations: ["deleteEventDetail"])

	onCreatePatientsDetail: PatientsDetail
		@aws_subscribe(mutations: ["createPatientsDetail","publishNewPatientsDetail"])
	onUpdatePatientsDetail: PatientsDetail
		@aws_subscribe(mutations: ["updatePatientsDetail","publishPatientsDetailUpdates"])
	onDeletePatientsDetail: PatientsDetail
		@aws_subscribe(mutations: ["deletePatientsDetail"])

	onCreateSensorsDetail: SensorsDetail
		@aws_subscribe(mutations: ["createSensorsDetail","publishNewSensorsDetail"])
	onUpdateSensorsDetail: SensorsDetail
		@aws_subscribe(mutations: ["updateSensorsDetail","publishSensorsDetailUpdates"])
	onDeleteSensorsDetail: SensorsDetail
		@aws_subscribe(mutations: ["deleteSensorsDetail"])

	onCreateUsersDetail: UsersDetail
		@aws_subscribe(mutations: ["createUsersDetail","publishNewUsersDetail"])
	onUpdateUsersDetail: UsersDetail
		@aws_subscribe(mutations: ["updateUsersDetail","publishUsersDetailUpdates"])
	onDeleteUsersDetail: UsersDetail
		@aws_subscribe(mutations: ["deleteUsersDetail"])
}
